{"version":3,"sources":["components/Login.jsx","components/Profile.jsx","components/Signup.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","userInput","name","email","password","error","e","k","target","getAttribute","this","value","setState","i","Axios","post","user","then","r","undefined","data","history","replace","location","className","style","display","htmlFor","onChange","change","bind","data-id","type","id","onClick","login","Component","Profile","Signup","console","log","save","App","to","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fd2cced4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Axios from \"axios\"\r\n\r\n class Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            userInput:{\r\n                name:\"\",\r\n                email:\"\",\r\n                password:\"\"\r\n            },\r\n            error:\"\"\r\n            \r\n             \r\n        }\r\n    }\r\n    change(e){\r\n        let k=e.target.getAttribute(\"data-id\")\r\n        this.state.userInput[k]=e.target.value\r\n        this.setState({})\r\n    }\r\n    login(){\r\n        this.state.error=\"\"\r\n        for(let i in this.state.userInput){\r\n            if(this.state.userInput[i]===\"\"){\r\n                this.state.error=\"Please fill in all fields\"\r\n            }\r\n        }\r\n        this.setState({})\r\n\r\n        if (this.state.error===\"\") {\r\n            Axios.post(\"http://localhost:4000/login\",{user:this.state.userInput})\r\n            .then(r=>{\r\n                if (r.data[0]===undefined) {\r\n                    this.state.error=\"Incorrect input data\"\r\n                    this.setState({})\r\n                }\r\n                else{\r\n                    this.props.history.replace(\"/Profile\", \"Name = \"+r.data[0].name +\" Email = \" +r.data[0].email+\" Password = \"+ r.data[0].password)\r\n                    //  console.log(r.data[0].name);\r\n\r\n                }\r\n                 \r\n            })\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.location.state}</h1>\r\n                <div className=\"w-50 mx-auto alert-warning p-4\">\r\n                    <h1 className=\"text-center\">Login here!</h1>\r\n                    <div style={{display:this.state.error===\"\"?\"none\":\"block\"}} className=\"alert alert-danger\">{this.state.error}</div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"name\">Name:</label>\r\n                        <input onChange ={this.change.bind(this)} value={this.state.userInput.name} data-id=\"name\" type=\"text\" id=\"name\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\">Email:</label>\r\n                        <input onChange ={this.change.bind(this)} value={this.state.userInput.email} data-id=\"email\" type=\"email\" id=\"email\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Password:</label>\r\n                        <input onChange ={this.change.bind(this)} value={this.state.userInput.password} data-id=\"password\" type=\"password\" id=\"password\" className=\"form-control\" />\r\n                    </div>\r\n                    <button onClick={this.login.bind(this)} className=\"btn btn-warning\" >Login</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react'\r\n\r\nclass Profile extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.props.location.state}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile\r\n","import React, { Component } from 'react'\r\nimport Axios from \"axios\"\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            userInput:{\r\n                name:\"\",\r\n                email:\"\",\r\n                password:\"\"\r\n            },\r\n            error:\"\"\r\n            \r\n             \r\n        }\r\n    }\r\n    change(e){\r\n        let k=e.target.getAttribute(\"data-id\")\r\n        this.state.userInput[k]=e.target.value\r\n        this.setState({})\r\n    }\r\n    save(){\r\n        this.state.error=\"\"\r\n        console.log(this.state.userInput);\r\n        for(let i in this.state.userInput){\r\n            if(this.state.userInput[i]===\"\"){\r\n                this.state.error=\"Please fill in all fields\"\r\n            }\r\n        }\r\n        this.setState({})\r\n        if (this.state.error===\"\") {\r\n            Axios.post(\"http://localhost:4000/signup\",{user:this.state.userInput})\r\n            .then(r=>{\r\n                this.props.history.replace(\"/login\",\"Thank you for registration\")\r\n                // console.log(r.data);\r\n            })\r\n        }\r\n        \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"w-50 mx-auto alert-warning p-4\">\r\n                <h1 className=\"text-center\">Singup here!</h1>\r\n                <div style={{display:this.state.error===\"\"?\"none\":\"block\"}} className=\"alert alert-danger\">{this.state.error}</div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Name:</label>\r\n                    <input onChange ={this.change.bind(this)} value={this.state.userInput.name} data-id=\"name\" type=\"text\" id=\"name\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Email:</label>\r\n                    <input onChange ={this.change.bind(this)} value={this.state.userInput.email} data-id=\"email\" type=\"email\" id=\"email\" className=\"form-control\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <input onChange ={this.change.bind(this)} value={this.state.userInput.password} data-id=\"password\" type=\"password\" id=\"password\" className=\"form-control\" />\r\n                </div>\r\n                <button onClick={this.save.bind(this)} className=\"btn btn-warning\" >Save</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Signup\r\n","import React, { Component } from 'react'\nimport {BrowserRouter,Route,Link} from \"react-router-dom\"\nimport './App.css';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Signup from './components/Signup';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <nav className=\"navbar navbar-expand-sm bg-light\">\n         <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\" >Singnup</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/login\" >Login</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/profile\" >Profile</Link>\n          </li>\n        </ul>\n        </nav>\n        <Route path=\"/\" exact component={Signup} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/profile\" component={Profile} />\n\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}